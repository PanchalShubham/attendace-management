[{"/home/shubham/Desktop/attendace-management/client/src/index.js":"1","/home/shubham/Desktop/attendace-management/client/src/App.js":"2","/home/shubham/Desktop/attendace-management/client/src/Components/Homepage/Homepage.js":"3","/home/shubham/Desktop/attendace-management/client/src/Components/AuthForm/AuthForm.js":"4","/home/shubham/Desktop/attendace-management/client/src/DAO/DataAccessObject.js":"5","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/Dashboard.js":"6","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/AddClassroom.js":"7","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/ClassroomPage.js":"8","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/InstructorClassroomPage.js":"9","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/StudentClassroomPage.js":"10"},{"size":219,"mtime":1609481387194,"results":"11","hashOfConfig":"12"},{"size":1605,"mtime":1609513944958,"results":"13","hashOfConfig":"12"},{"size":1895,"mtime":1609687711956,"results":"14","hashOfConfig":"12"},{"size":7910,"mtime":1609568159294,"results":"15","hashOfConfig":"12"},{"size":4178,"mtime":1609577093210,"results":"16","hashOfConfig":"12"},{"size":12888,"mtime":1609588085492,"results":"17","hashOfConfig":"12"},{"size":2554,"mtime":1609514974460,"results":"18","hashOfConfig":"12"},{"size":4990,"mtime":1609569050737,"results":"19","hashOfConfig":"12"},{"size":11762,"mtime":1609588128687,"results":"20","hashOfConfig":"12"},{"size":8737,"mtime":1609588151072,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1n4m06b",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},"/home/shubham/Desktop/attendace-management/client/src/index.js",[],["45","46"],"/home/shubham/Desktop/attendace-management/client/src/App.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Homepage/Homepage.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/AuthForm/AuthForm.js",[],"/home/shubham/Desktop/attendace-management/client/src/DAO/DataAccessObject.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/Dashboard.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/AddClassroom.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/ClassroomPage.js",["47","48"],"/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/InstructorClassroomPage.js",["49","50"],"import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport {readClassroom, collectAttendance, \n          stopCollectingAttendance} from '../../DAO/DataAccessObject';\nimport { TableHead } from '@material-ui/core';\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n          \n\n// styles\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(0),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  classroomPage :{\n    padding: \"10px\", \n    width: \"80%\", \n    margin: \"10px auto\"\n  },\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n  table: {\n    minWidth: 500,\n  },\n}));\n\n\n\n// parses the records for the table\nfunction parseRecords(classroom, records) {\n\n  let presentStyle = {\n    backgroundColor: \"#cff4fc\", \n    color: '#055160', \n    padding: '5px',\n    borderRadius: '5px'\n  };\n  let absentStyle = {\n    backgroundColor: \"#f8d7da\", \n    color: '#842029', \n    padding: '5px',\n    borderRadius: '5px'\n  };\n  let rows = [];\n  let columns = ['studentId'];\n  for (let i = 0; i < records.length; ++i)\n    columns.push(records[i].attendanceId);\n  let headerRow = [];\n  for (let i = 0; i < columns.length; ++i)\n    headerRow.push(<TableCell align=\"left\" key={`head${i}`}><strong>{columns[i].toUpperCase()}</strong></TableCell>);\n  rows.push(headerRow);\n  if (classroom === null) return [columns, rows];\n  let students = classroom.studentOnce;\n  for (let i = 0; i < students.length; ++i) {\n    let studEmail = students[i];\n    let row = [];\n    row.push(<TableCell align=\"left\">{studEmail}</TableCell>)\n    for (let j = 0; j< records.length; ++j) {\n      let rec = records[j];\n      let attendees = rec.students;\n      let attended = attendees.indexOf(studEmail) !== -1;\n      let item = null;\n      if (attended) {\n        item = <span style={presentStyle}>Present</span>\n      } else {\n        // item = <Badge color=\"secondary\" badgeContent={\"Absent\"} />;\n        item = <span style={absentStyle}>Absent</span>\n      }\n      row.push(<TableCell align=\"left\" key={`cell_${i}_${j}`}>{item}</TableCell>);\n    }\n    rows.push(row);\n  }\n  return [columns, rows];\n}\n\n\n// functional component for classroomPage\nexport default function InstructorClassroomPage(props){\n  const {userId, classroomName, loader, setLoader, setSnack} = props;\n  const classes = useStyles();\n  const [classroom, setClassroom] = useState(null);\n  const [records, setRecords] = useState([]);\n  const [tempMessage, setTempMessage] = useState('Loading details of the classroom!');\n\n  let rows = parseRecords(classroom, records);\n  // for table\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  \n\n  // invokes whenever classroomName changes!\n  useEffect(()=>{\n    setLoader({loading: true, text: `Please wait! I'm fetching details for this classroom`});\n    readClassroom(userId, classroomName).then(response=>{\n      let data = response.data;\n      if (data.error) {\n        setTempMessage('Failed to load details of this classroom!');\n        setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      } else {\n        setClassroom(data.classroom);\n        setRecords(data.records);\n      }\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    }).finally(()=>{\n      setLoader({loading: false, text: ``});\n    });\n  }, classroomName);\n\n\n\n  // starts collecting attendance\n  const onCollectAttendance = function(event) {\n    event.preventDefault();\n    if (loader.loading) return;\n    let attendanceId = String(document.getElementById('attendanceId').value).trim();\n    if (attendanceId === '') {\n      setSnack({visible: true, snackType: 'error', snackMessage: 'Please provide a valid attendanceId'});\n      return;\n    }\n\n    // make server request here\n    setLoader({loading: true, text: `Please wait! I'm processing your request`});\n    collectAttendance(classroom._id, attendanceId).then(response => {\n      let data = response.data;\n      if (data.error) {\n        setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      } else {\n        setClassroom(data.classroom);\n      }\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    }).finally(()=>{\n      setLoader({loading: false, text: ''})\n    });\n  };\n\n  // stops collecting attendance\n  const onStopCollectingAttendance = function(event) {\n    if (loader.loading) return;\n    let classroomId = classroom._id;\n    let attendanceId = classroom.collectingFor;\n    // make server request here\n    setLoader({loading: true, text: `Please wait! I'm processing your request`});\n    stopCollectingAttendance(classroomId, attendanceId).then(response => {\n      let data = response.data;\n      if (data.error) {\n        setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      } else {\n        setClassroom(data.classroom);\n      }\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    }).finally(()=>{\n      setLoader({loading: false, text: ''})\n    });\n  };\n\n\n  // if classroom is not loaded then show error message\n  if (classroom === null) {\n    return (\n      <div id=\"classroomPage\" className={classes.classroomPage}>\n        {tempMessage}\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"classroomPage\" className={classes.classroomPage}>\n        <div style={{textAlign: \"center\"}}><strong>Classroom Name: </strong>{classroom.className}</div>\n        <div style={{textAlign: \"center\"}}><strong>Classroom Code: </strong>{classroom.code}</div>\n\n        {/* display form or stop button */}\n        {classroom.collectingFor ?\n        <Button type=\"submit\" fullWidth\n          variant=\"contained\" color=\"secondary\"\n          className={classes.submit} onClick={onStopCollectingAttendance}>\n          Stop collecting attedance for {classroom.collectingFor}\n        </Button>\n        :\n        <form className={classes.form} noValidate onSubmit={onCollectAttendance}>\n            {/* input fields */}\n            <TextField variant=\"outlined\" margin=\"normal\" fullWidth\n                id=\"attendanceId\" label=\"Attendance ID\" \n                name=\"attendanceId\" autoComplete=\"text\"\n                autoFocus />\n            <Button id=\"submitButton\" type=\"submit\" fullWidth\n                variant=\"contained\" color=\"primary\"\n                className={classes.submit}>\n                Collect attendance\n            </Button>\n        </form>    \n      }\n\n\n      {/* displays the records */}\n      <div style={{textAlign: 'center'}}><br/>Your attendance record for this classroom!</div>\n      <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"custom pagination table\">\n        <TableHead>\n          <TableRow>\n            {/* <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            /> */}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={0}>\n              {row}\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n    <div style={{textAlign: 'right'}}>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n        colSpan={3}\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        SelectProps={{\n          inputProps: { 'aria-label': 'rows per page' },\n          native: true,\n        }}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        ActionsComponent={TablePaginationActions}\n      />\n    </div>\n\n    </div>\n  );\n}\n","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/StudentClassroomPage.js",["51","52"],"import React, {useState, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport Badge from '@material-ui/core/Badge';\nimport {readClassroom, markAttendance} from '../../DAO/DataAccessObject';\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\n// styles\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(0),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  classroomPage :{\n    padding: \"10px\", \n    width: \"80%\", \n    margin: \"10px auto\"\n  },\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n  table: {\n    minWidth: 500,\n  },\n}));\n\n\n// functional component for classroomPage\nexport default function StudentClassroomPage(props){\n  const {userId, user, classroomName, setLoader, setSnack} = props;\n  const classes = useStyles();\n  const [classroom, setClassroom] = useState(null);\n  const [records, setRecords] = useState([]);\n  const [tempMessage, setTempMessage] = useState('Loading details of the classroom!');\n\n  // generate stats for the user\n  let rows = [];\n  for(let i = 0; i < records.length; ++i) {\n    let rec = records[i];\n    let key = rec.attendanceId;\n    let value = null;\n    if (rec.students.indexOf(user.email) === -1) {\n      value = <Badge color=\"secondary\" badgeContent={\"Absent\"}/>\n    } else {\n      value = <Badge color=\"primary\" badgeContent={\"Present\"}/>\n    }\n    rows.push({key, value});\n  }\n  \n\n  // for table\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // invokes whenever classroomName changes!\n  useEffect(()=>{\n    setLoader({loading: true, text: `Please wait! I'm fetching details for this classroom`});\n    readClassroom(userId, classroomName).then(response=>{\n      let data = response.data;\n      if (data.error) {\n        setTempMessage('Failed to load details of this classroom!');\n        setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      } else {\n        setClassroom(data.classroom);\n        setRecords(data.records);\n      }\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    }).finally(()=>{\n      setLoader({loading: false, text: ``});\n    });\n  }, classroomName);\n\n  // makes a request to mark attendance\n  const onMarkAttendance = function() {\n    setLoader({loading: true, text: `Please wait! I'm marking your attendance!`});\n    markAttendance(user._id, classroom._id).then(response => {\n      let data = response.data;\n      if (data.error) {\n        setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      } else {\n        setClassroom(data.classroom);\n        setRecords(data.records);\n      }\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    }).finally(()=>{\n      setLoader({loading: false, text: ``});\n    });\n  };\n\n  let toMark = false;\n  for (let i = 0; i < records.length; ++i)\n    if (records[i].attendanceId === classroom.collectingFor){\n      toMark = (records[i].students.indexOf(user.email) === -1);\n      break;\n    }\n\n\n  // if classroom is not loaded then show error message\n  if (classroom === null) {\n    return (\n      <div id=\"classroomPage\" className={classes.classroomPage}>\n        {tempMessage}\n      </div>\n    );\n  }\n\n  // render the actual component\n  return (\n    <div id=\"classroomPage\" className={classes.classroomPage}>\n        <div style={{textAlign: \"center\"}}><strong>Classroom Name: </strong>{classroom.className}</div>\n        <div style={{textAlign: \"center\"}}><strong>Classroom Code: </strong>{classroom.code}</div>\n\n        {/* display form or stop button */}\n        {classroom.collectingFor && toMark &&\n        <Button type=\"submit\" fullWidth\n          variant=\"contained\" color=\"primary\"\n          className={classes.submit} onClick={onMarkAttendance}>\n          Mark attedance for {classroom.collectingFor}\n        </Button>\n      }\n\n\n      {/* displays the records */}\n      <div style={{textAlign: 'center'}}><br/>Your attendance record for this classroom!</div>\n      <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"custom pagination table\">\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.key}\n              </TableCell>\n              <TableCell align=\"left\">\n                {row.value}\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n\n    </div>\n  );\n}\n",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":61,"column":6,"nodeType":"59","endLine":61,"endColumn":19},{"ruleId":"57","severity":1,"message":"60","line":61,"column":6,"nodeType":"59","endLine":61,"endColumn":19,"suggestions":"61"},{"ruleId":"57","severity":1,"message":"58","line":210,"column":6,"nodeType":"59","endLine":210,"endColumn":19},{"ruleId":"57","severity":1,"message":"60","line":210,"column":6,"nodeType":"59","endLine":210,"endColumn":19,"suggestions":"62"},{"ruleId":"57","severity":1,"message":"58","line":172,"column":6,"nodeType":"59","endLine":172,"endColumn":19},{"ruleId":"57","severity":1,"message":"60","line":172,"column":6,"nodeType":"59","endLine":172,"endColumn":19,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","Identifier","React Hook useEffect has missing dependencies: 'classroomName', 'setLoader', 'setSnack', and 'userId'. Either include them or remove the dependency array.",["66"],["67"],["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"69","fix":"71"},{"desc":"69","fix":"72"},"Update the dependencies array to be: [classroomName, setLoader, setSnack, userId]",{"range":"73","text":"74"},{"range":"75","text":"74"},{"range":"76","text":"74"},[1818,1831],"[classroomName, setLoader, setSnack, userId]",[6694,6707],[5456,5469]]