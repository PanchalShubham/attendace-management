[{"/home/shubham/Desktop/attendace-management/client/src/index.js":"1","/home/shubham/Desktop/attendace-management/client/src/App.js":"2","/home/shubham/Desktop/attendace-management/client/src/Components/Homepage/Homepage.js":"3","/home/shubham/Desktop/attendace-management/client/src/Components/AuthForm/AuthForm.js":"4","/home/shubham/Desktop/attendace-management/client/src/DAO/DataAccessObject.js":"5","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/Dashboard.js":"6","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/AddClassroom.js":"7","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/ClassroomPage.js":"8"},{"size":219,"mtime":1609481387194,"results":"9","hashOfConfig":"10"},{"size":1605,"mtime":1609513944958,"results":"11","hashOfConfig":"10"},{"size":139,"mtime":1609481745896,"results":"12","hashOfConfig":"10"},{"size":7889,"mtime":1609511362305,"results":"13","hashOfConfig":"10"},{"size":2121,"mtime":1609516910340,"results":"14","hashOfConfig":"10"},{"size":10962,"mtime":1609517282049,"results":"15","hashOfConfig":"10"},{"size":2554,"mtime":1609514974460,"results":"16","hashOfConfig":"10"},{"size":2020,"mtime":1609519618945,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1n4m06b",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shubham/Desktop/attendace-management/client/src/index.js",[],["36","37"],"/home/shubham/Desktop/attendace-management/client/src/App.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Homepage/Homepage.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/AuthForm/AuthForm.js",[],"/home/shubham/Desktop/attendace-management/client/src/DAO/DataAccessObject.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/Dashboard.js",["38"],"import React, {useState, useEffect} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Alert from '@material-ui/lab/Alert';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport LoadingOverlay from 'react-loading-overlay';\n\n\nimport {Redirect} from 'react-router-dom';\nimport AddClassroom from './AddClassroom';\nimport ClassroomPage from './ClassroomPage';\nimport {fetchClassrooms, logoutUser, decrypt, createClassroom, joinClassroom} from '../../DAO/DataAccessObject';\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// functional component\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const handleDrawerOpen = () => { setOpen(true); };\n  const handleDrawerClose = () => { setOpen(false); };\n  const [loader, setLoader] = useState({loading: false, text: ''})\n  const [currentItem, setCurrentItem] = useState(null);\n  const [user, setUser] = useState(null);\n  const [redirect, setRedirect] = useState(null);\n  const [snack, setSnack] = useState({visible: false, snackType: 'success', snackMessage: ''});\n  const [classVisible, setClassVisible] = useState(false);\n  const [classrooms, setClassrooms] = useState([]);\n\n\n  // snack-management\n  const showSnackBar = function(type, message) {\n    setSnack({visible: true, snackType: type, snackMessage: message});\n  }\n  const hideSnackBar = function(event) {\n    setSnack({visible: false, snackType: 'success', snackMessage: ''});\n  }\n\n  // componentDidMount\n  useEffect(function(){\n    let item = localStorage.getItem('_auth');\n    let tempUser = decrypt(item);\n    setUser(tempUser);\n    fetchClassrooms(tempUser._id, tempUser.role).then(response => {\n      let data = response.data;\n      if (data.error) setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      else            setClassrooms(data.classrooms);\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    });\n  }, []);\n\n  // for logout\n  const onLogout = function(event){\n    logoutUser().then((response)=>{\n      let data = response.data;\n      if (data.error) {\n        setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n      } else {\n        localStorage.removeItem('_auth');\n        setRedirect(<Redirect to=\"/login\" />)\n      }\n    }).catch(err => {\n      setSnack({visible: true, snackType: 'error', snackMessage: err});\n    });\n  };\n\n  // for add-classroom!\n  const addClassroom = function(event) {\n    let item = <AddClassroom showSnackBar={showSnackBar} \n                    onAddClassroom={onAddClassroom} role={user != null ? user.role : 'teacher'}/>\n    setCurrentItem(item);\n    setClassVisible(false);\n  }\n  const onAddClassroom = function(value) {\n    if (user == null)   return;\n    if (loader.loading) return;\n    let role = user.role;\n    let isTeacher = (role === 'teacher');\n    setLoader({loading: true, \n      text: `${isTeacher ? 'Creating' : 'Joininig'} classroom`});\n    if (isTeacher) {\n      createClassroom(user._id, value).then(response => {\n        let data = response.data;\n        if (data.error)   setSnack({visible: true, snackType: 'error', snackMessage: data.error});\n        else              setSnack({visible: true, snackType: 'success', snackMessage: 'Your classroom was successfully created!'});\n      }).catch(err => {\n        setSnack({visible: true, snackType: 'error', snackMessage: err});\n      }).finally(()=>{\n        setLoader({loading: false, text: ''});\n      });\n    } else {\n\n    }\n  }\n\n  // for classroom-page\n  const onViewClassroom = function(classroomId) {\n    let index = -1;\n    for (let i = 0; i < classrooms.length; ++i)\n      if (classrooms[i]._id === classroomId) {\n        index = i; break;\n      }\n    if (index === -1) return;\n    let classroom = classrooms[index];\n    let item = <ClassroomPage classroom={classroom}/>\n    setCurrentItem(item);\n    setClassVisible(true);\n  }\n\n  return redirect || (\n    <LoadingOverlay active={loader.loading} spinner text={loader.text}>\n    <div className={classes.root}>\n      <CssBaseline />\n      {/* topbar */}\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton edge=\"start\" color=\"inherit\" \n            aria-label=\"open drawer\" onClick={handleDrawerOpen} \n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}>\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            {user != null ? user.username + \"(\" + user.role + \")\" : \"<username>\"}\n          </Typography>\n          <IconButton color=\"inherit\" onClick={onLogout}>\n            <ExitToAppIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n\n\n      {/* sidebar */}\n      <Drawer variant=\"permanent\" classes={{paper: clsx(classes.drawerPaper, !open \n                    && classes.drawerPaperClose),}} open={open}>\n        <div className={classes.toolbarIcon}>\n            Attendance Management\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <div>\n            <ListItem button onClick={addClassroom} disabled={loader.loading}>\n              <ListItemIcon>\n                <AddBoxIcon />\n              </ListItemIcon>\n              <ListItemText primary={user != null ? (user.role === 'teacher' ? \"New classroom\" : \"Join classroom\") : \"\"}/>\n            </ListItem>\n            <ListItem button onClick={onViewClassroom} disabled={loader.loading || !classVisible}>\n              <ListItemIcon>\n                <DeleteIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Delete Classroom\" />\n            </ListItem>\n            <ListItem button disabled={loader.loading || !classVisible}>\n              <ListItemIcon>\n                <GetAppIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Export Statistics\" />\n            </ListItem>\n            <ListItem button disabled={loader.loading}>\n              <ListItemIcon>\n                <AccountBoxIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Manage Profile\" />\n            </ListItem>\n          </div>          \n        </List>\n        <Divider />\n        <List>\n          <div>\n            <ListSubheader inset>Your classrooms</ListSubheader>\n            {classrooms.map(item => \n              <ListItem button disabled={loader.loading} \n                key={item._id} onClick={event => onViewClassroom(item._id)}>\n                <ListItemIcon><AssignmentIcon /></ListItemIcon>\n                <ListItemText primary={item.className}/>\n              </ListItem>            \n            )}\n          </div>\n        </List>\n      </Drawer>\n\n\n\n      {/* central content */}\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {!currentItem && \n          <p>Welcome {user != null ? user.username : \"<username>\"}<br/>We are glad to see here.<br/>\n           Click on the left menu to get started!</p>}\n        </Container>\n        {currentItem}\n      </main>\n\n\n\n\n\n      {/* snackbar */}\n      <Snackbar anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n        open={snack.visible} autoHideDuration={6000} onClose={hideSnackBar}>\n          <Alert severity={snack.snackType}\n          action={\n            <IconButton aria-label=\"close\" color=\"inherit\"\n              size=\"small\" onClick={hideSnackBar} >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }>\n          {String(snack.snackMessage)}\n        </Alert>\n      </Snackbar>\n\n    </div>\n    </LoadingOverlay>\n  );\n}","/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/AddClassroom.js",[],"/home/shubham/Desktop/attendace-management/client/src/Components/Dashboard/ClassroomPage.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":34,"column":64,"nodeType":"45","messageId":"46","endLine":34,"endColumn":77},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'joinClassroom' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]